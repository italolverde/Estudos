Comandos para PSI
Sumário :
Linha 5: SQLITE /// Linha 25: Formularios /// Linha 29: Cookies /// Linha 42: Hash
---------------------------------------------------------------------------------
SQLITE:
- Função para pegar conexão com o BD:
def get_connection():
    conn = sqlite3.connect("nome do arquivo.db")
    conn.row_factory = sqlite3.Row
    return conn

- Para criar o conn nas funções de rota, use --> conn = get_connection()

- Exemplo de comando para inserir valores na tabela:
conn.execute("INSERT INTO tabela(coluna1, coluna2) VALUES (?,?)", (var1, var2))
conn.commit() ; conn.close() 

- Exemplo de comando de update:
conn.execute('UPDATE tabela SET coluna1=? WHERE coluna2=?', (var1, var2))
(romerito não usou commit e close e funcionou, mas caso de erro tente usar)

- Exemplo de comando para pegar valores da tabela:
var = conn.execute("SELECT * FROM tabela").fetchall()
---------------------------------------------------------------------------------
Formulários:
- Pegar valor de um input de formulario: 
var = request.form['name do input']
---------------------------------------------------------------------------------
Cookies:

- Pegar o valor do request: 
varcookie = request.args.get('nome_request')

- Comandos pra manipular cookies, deletar e definir: (Não entendo o que está escrito aqui, peguei ctrl+c do código de romerito)
template = render_template('cor.html', cor = request.cookies['color'])
response = make_response(template)
response.delete_cookie('color')
response.set_cookie('color', value = cor)


---------------------------------------------------------------------------------
Hash: from werkzeug.security import generate_password_hash, check_password_hash

Gerar hash de uma string:
generate_password_hash('string')

Comparar hash e string:
check_password_hash(hash, 'string')

@property (ainda vou estudar e escrever mais sobre mas quando uma propriedade de uma classe é acessada, ela troca o valor de retorno) :
@property
def _password(self): // Quando tiverem tentando ver a propriedade _password
    return self._hash // O que vai ser retornado, na verdade, vai ser o _hash (senha criptografada)

Login: (pip install Flask-Login) from flask_login import LoginManager, login_required, login_user, logout_user, UserMixin

login_manager = LoginManager()
app.config['SECRET_KEY'] = 'SUPERDIFICIL'
login_manager.init_app(app)

{
@login_manager.user_loader
def load_user(user_id):
    return User.get(user_id)
}

class User(UserMixin):
    id : int
    def __init__(self):
        pass

    def get(self):
        pass

@login_required entre a linha da definição da rota e da função da rota faz com que seja necessário login ativo para acessar a página.
login_user(user) loga o usuario


------------------------------------- SQL ALCHEMY ------------------------------------------
Programação de banco de dados usando POO

mysql: create_engine("mysql:/root:@localhost/sqlalchemy")
mysqlclient : reate_engine("mysql+mysqldb:/root:@localhost/sqlalchemy")

#Exemplo 1 só sqlalchemy sem sessão, sem modelo, só sql puro. ------------------------------

from sqlalchemy import create_engine, text

engine = create_engine('sqlite:///database.db')

sql = text("""CREATE TABLE IF NOT EXISTS users(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nome TEXT);""")  #faz com que o texto seja entendido como código sql, o código é a criação de uma tabela

conn = engine.connect()

conn.execute(sql)
conn.commit()

insert = text("INSERT INTO users(nome) VALUES(:nome)") # :coluna especifica que vai ser um valor recebido na hora do insert
conn.execute(insert,{'nome':'Mike Shinoda',})
conn.commit()



#Exemplo 2 de sql+sessão sem modelo --------------------------------------------------------

from sqlalchemy import create_engine, text 
from sqlalchemy.orm import Session

engine = create_engine("sqlite:///app2.db")

session = Session(bind=engine)

sql = text("""CREATE TABLE IF NOT EXISTS users(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nome TEXT);""")

session.execute(sql)
session.commit()

insert = text("INSERT INTO users(nome) VALUES(:nome)") # :coluna especifica que vai ser um valor recebido na hora do insert
session.execute(insert,{'nome':'Sebosao',})
session.commit()



#Exemplo 3 de criar db, tabela e inserir usuario usando modelo e sessão --------------------

from sqlalchemy import create_engine 
from sqlalchemy.orm import Session

from models import User, Base

engine = create_engine("sqlite:///app2.db")

Base.metadata.create_all(bind=engine) 

session = Session(bind=engine)
usuario = User(nome = 'jhonblack')
session.add(usuario)
session.commit()



#Modelo do exemplo 3 -----------------------------------------------------------------------

from sqlalchemy.orm import Mapped, mapped_column
from sqlalchemy.orm import DeclarativeBase

class Base(DeclarativeBase):
    pass

class User(Base):
    __tablename__ = 'users'
    id:Mapped[int] = mapped_column(primary_key=True)
    nome:Mapped[str]
